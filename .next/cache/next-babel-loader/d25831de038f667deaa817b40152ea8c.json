{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport '../styles/app.css';\nimport '../styles/variables.css';\nimport StoreContext from '../store/index';\nimport { useState, useEffect, useLayoutEffect } from 'react';\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState(null),\n      theme = _useState[0],\n      setTheme = _useState[1];\n  /*UseLayoutEffect içinde planlanan güncellemeler, tarayıcının boyama şansı bulamadan eşzamanlı olarak temizlenir.*/\n\n\n  useEffect(function () {\n    var theme = localStorage.getItem('THEME') || 'light';\n    setTheme(theme);\n  }, []);\n  /* we recommend starting with useEffect first and only trying useLayoutEffect if that causes a problem. */\n\n  var changeTheme = function changeTheme(theme) {\n    setTheme(theme);\n    localStorage.setItem('THEME', theme);\n  };\n\n  useEffect(function () {\n    if (!theme) return;\n    var $html = document.querySelector('html');\n    $html.classList.remove('light');\n    $html.classList.remove('dim');\n    $html.classList.remove('dark');\n    $html.classList.add(theme.toString());\n  }, [theme]);\n  return __jsx(StoreContext.Provider, {\n    value: {\n      theme: theme,\n      changeTheme: changeTheme\n    }\n  }, __jsx(Component, pageProps));\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}